) -> panelObject
save(panelObject, host_data_list,  file = pomp_filename)
}
setwd("~/Desktop/Flu_immune_dynamics/Influenza-immune-dynamics/Models/Multi_strain_model/Inference")
########################################################################
## Analyze the final results of a MIF search in parameter space
########################################################################
require(ggplot2)
theme_set(theme_bw(base_size = 18))
require(MASS)
require(RSQLite)
require(reshape2)
require(dplyr)
source("../Utility_scripts/model_simulation_functions_multi_strain.R")
textSize = 12
source("../Utility_scripts/plot_themes.R")
require(pomp)
require(panelPomp)
select <- dplyr::select
summarize <- dplyr::summarise
## Input specs ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------
chain_filename <- "chain_results_ad_test.rda"
result_type = "global"
global_search_filename <- "../Inference/profile_w_hetero_combined_2.csv"
this_param = "log_w_hetero"
## -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
load(chain_filename)
names <- names(df %>% select(-c(loglik, nfail, iter, chain)))
setwd("/Volumes/cobey/s_ranjeva/2018_3_multistrain/results_analysis")
########################################################################
## Analyze the final results of a MIF search in parameter space
########################################################################
require(ggplot2)
theme_set(theme_bw(base_size = 18))
require(MASS)
require(RSQLite)
require(reshape2)
require(dplyr)
source("../Utility_scripts/model_simulation_functions_multi_strain.R")
textSize = 12
source("../Utility_scripts/plot_themes.R")
require(pomp)
require(panelPomp)
select <- dplyr::select
summarize <- dplyr::summarise
## Input specs ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------
chain_filename <- "chain_results_ad_test.rda"
result_type = "global"
global_search_filename <- "../Inference/profile_w_hetero_combined_2.csv"
this_param = "log_w_hetero"
## -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
load(chain_filename)
names <- names(df %>% select(-c(loglik, nfail, iter, chain)))
names
setwd("~/Desktop/Flu_immune_dynamics/Influenza-immune-dynamics/Models/Multi_strain_model/Results_analysis")
save(names, file = "param_names.rda")
names[23]
names[23]
names[23] = "log_sig"
names[24]
names[24] = "log_sig_2"
names[4]
names = names[-4]
save(names, file = "param_names.rda")
param_names
names
load("param_names.rda")
names
require(ggplot2)
theme_set(theme_bw(base_size = 18))
require(MASS)
require(RSQLite)
require(reshape2)
require(dplyr)
source("../Utility_scripts/model_simulation_functions_boosting.R")
require(pomp)
require(panelPomp)
select <- dplyr::select
summarize <- dplyr::summarize
rename <- dplyr::rename
setwd("~/Desktop/Flu_immune_dynamics/Influenza-immune-dynamics/Models/Short_term_sub_model/Inference")
require(ggplot2)
theme_set(theme_bw(base_size = 18))
require(MASS)
require(RSQLite)
require(reshape2)
require(dplyr)
source("../Utility_scripts/model_simulation_functions_boosting.R")
require(pomp)
require(panelPomp)
select <- dplyr::select
summarize <- dplyr::summarize
rename <- dplyr::rename
## Specify the name of the pomp object file ------------------------------------------------------
test_subtype = "pH1N1" # Choose between "pH1N1" and "H3N2"
data_table_name <- paste0("data_sub_model_",test_subtype)
pomp_filename <- "" # Name the pomp object file (".rda" file)
dbFilename <- "../../../Data/Data.sqlite"
#Read in data
db <- dbConnect(SQLite(), dbFilename)
serology_sub <- dbReadTable(db, data_table_name)
dbDisconnect(db)
# Filtering for kids <= 15 y old, but can be altered to generate pomp object for adults too
serology_sub <- serology_sub %>% filter(age_at_recruitment <= 15)
timestep = 2.5 # Simulation timestep, days
## Generate test params
shared_params <- c(
log_transform_titers = 1,
measurement_error = 2,
log_transform_obs = 1,
variable_boosting = 1,
include_k = 1,
log_mean_gam = log(5),
log_var_gam = log(1),
log_T_peak = log(28),
log_k = log(.9), # trivial value just to construct the pomp object
log_w = log(1/180),
log_r = log(log(2)/(28*10)),
log_mean_boost = log(8), # trivial value just to construct the pomp object
log_sd_boost = log(.1), # trivial value just to construct the pomp object
log_sig = log(1.29),
log_sig_2 = log(0.74)
)
test_ids = unique(serology_sub$memberID)
pomp_object_list <- lapply(c(1:length(test_ids)),
test_ids = test_ids,
make_pomp_panel,
data = serology_sub,
test_params = shared_params,
timestep = timestep,
log_transform_titer = F
)
setwd("~/Desktop/Flu_immune_dynamics/Influenza-immune-dynamics/Models/Short_term_sub_model/Raw_data_analysis")
require(ggplot2)
require(cowplot)
require(MASS)
require(RSQLite)
require(reshape2)
require(dplyr)
source("../../../Utility_scripts/model_functions.R")
textSize = 12
source("../../../Utility_scripts/plot_themes.R")
require(pomp)
require(panelPomp)
select <- dplyr::select
summarize <- dplyr::summarize
test_subtype = "pH1N1" # Choose between "pH1N1" and "H3N2"
data_table_name <- paste0("data_sub_model_",test_subtype)
pomp_filename <- "" # Name the pomp object file (".rda" file)
dbFilename <- "../../../Data/Data.sqlite"
#Read in data
db <- dbConnect(SQLite(), dbFilename)
serology_sub <- dbReadTable(db, data_table_name)
dbDisconnect(db)
serology_sub$age = NA
for( i in c(1:nrow(serology_sub))){
serology_sub[i,]$age = demog[demog$memberID == serology_sub[i,]$memberID,]$age_at_recruitment
}
db <- dbConnect(SQLite(), dbFilename)
serology_sub <- dbReadTable(db, data_table_name)
dbDisconnect(db)
head(serology_sub)
db <- dbConnect(SQLite(), dbFilename)
serology_sub <- dbReadTable(db, data_table_name) %>%
rename(age = age_at_recruitment)
dbDisconnect(db)
sub <- serology_sub%>%
mutate(Child  = as.factor(age < 15)) %>%
group_by(memberID,swab_date,Child,age,min_date,max_date) %>%
summarize(delta = log_titer_trans(max(value)) - log_titer_trans(min(value)),
pre = log_titer_trans(min(value)),
dt1 = as.numeric(max(swab_date) - min(date)),
dt2 = as.numeric(max(date) - max(swab_date)),
dt_total = as.numeric(max(date) - min(date)))
p1 <- ggplot(sub %>% filter(dt_total < 365), aes(x = pre, y = delta)) +
geom_point() +
stat_smooth(method = "lm", color = "red", se = F) +
geom_jitter(height = .1, width = .1) +
xlab("Log pre-infection titer") +
ylab(expression(Delta~titer)) +
plot_themes
p2 <- ggplot(sub %>% filter(dt_total < 365), aes(x = pre, y = delta)) +
geom_point() +
facet_wrap(~Child) +
stat_smooth(method = "lm", color = "red", se = F) +
geom_jitter(height = .1, width = .1) +
xlab("Log pre-infection titer") +
ylab(expression(Delta~titer)) +
plot_themes
require(ggplot2)
require(cowplot)
require(MASS)
require(RSQLite)
require(reshape2)
require(dplyr)
source("../../../Utility_scripts/model_functions.R")
textSize = 12
source("../../../Utility_scripts/plot_themes.R")
require(pomp)
require(panelPomp)
select <- dplyr::select
summarize <- dplyr::summarize
require(ggplot2)
require(cowplot)
require(MASS)
require(RSQLite)
require(reshape2)
require(dplyr)
source("../Utility_scripts/model_functions.R")
textSize = 12
source("../Utility_scripts/plot_themes.R")
require(pomp)
require(panelPomp)
select <- dplyr::select
summarize <- dplyr::summarize
age_thres = 15 # Age threshold to distinguish between children and adults
test_subtype = "pH1N1" # Choose between "pH1N1" and "H3N2"
data_table_name <- paste0("data_sub_model_",test_subtype)
pomp_filename <- "" # Name the pomp object file (".rda" file)
dbFilename <- "../../../Data/Data.sqlite"
#Read in data
db <- dbConnect(SQLite(), dbFilename)
serology_sub <- dbReadTable(db, data_table_name) %>%
rename(age = age_at_recruitment)
dbDisconnect(db)
require(ggplot2)
require(cowplot)
require(MASS)
require(RSQLite)
require(reshape2)
require(dplyr)
source("../Utility_scripts/model_functions.R")
textSize = 12
source("../Utility_scripts/plot_themes.R")
require(pomp)
require(panelPomp)
select <- dplyr::select
summarize <- dplyr::summarize
age_thres = 15 # Age threshold to distinguish between children and adults
test_subtype = "pH1N1" # Choose between "pH1N1" and "H3N2"
data_table_name <- paste0("data_sub_model_",test_subtype)
pomp_filename <- "" # Name the pomp object file (".rda" file)
dbFilename <- "../../../Data/Data.sqlite"
#Read in data
db <- dbConnect(SQLite(), dbFilename)
serology_sub <- dbReadTable(db, data_table_name) %>%
rename(age = age_at_recruitment)
dbDisconnect(db)
setwd("~/Desktop/Flu_immune_dynamics/Influenza-immune-dynamics/Models/Short_term_sub_model/Raw_data_analysis")
require(ggplot2)
require(cowplot)
require(MASS)
require(RSQLite)
require(reshape2)
require(dplyr)
source("../Utility_scripts/model_simulation_functions_boosting.R")
textSize = 12
source("../Utility_scripts/plot_themes.R")
require(pomp)
require(panelPomp)
select <- dplyr::select
summarize <- dplyr::summarize
age_thres = 15 # Age threshold to distinguish between children and adults
test_subtype = "pH1N1" # Choose between "pH1N1" and "H3N2"
data_table_name <- paste0("data_sub_model_",test_subtype)
pomp_filename <- "" # Name the pomp object file (".rda" file)
dbFilename <- "../../../Data/Data.sqlite"
#Read in data
db <- dbConnect(SQLite(), dbFilename)
serology_sub <- dbReadTable(db, data_table_name) %>%
rename(age = age_at_recruitment)
dbDisconnect(db)
# Calculate the time between first titer and swab, and between swab and second titer
sub <- serology_sub%>%
mutate(Child  = as.factor(age <= age_thres)) %>%
group_by(memberID,swab_date,Child,age,min_date,max_date) %>%
summarize(delta = log_titer_trans(max(value)) - log_titer_trans(min(value)),
pre = log_titer_trans(min(value)),
dt1 = as.numeric(max(swab_date) - min(date)),
dt2 = as.numeric(max(date) - max(swab_date)),
dt_total = as.numeric(max(date) - min(date)))
p1 <- ggplot(sub %>% filter(dt_total < 365), aes(x = pre, y = delta)) +
geom_point() +
stat_smooth(method = "lm", color = "red", se = F) +
geom_jitter(height = .1, width = .1) +
xlab("Log pre-infection titer") +
ylab(expression(Delta~titer)) +
plot_themes
p2 <- ggplot(sub %>% filter(dt_total < 365), aes(x = pre, y = delta)) +
geom_point() +
facet_wrap(~Child) +
stat_smooth(method = "lm", color = "red", se = F) +
geom_jitter(height = .1, width = .1) +
xlab("Log pre-infection titer") +
ylab(expression(Delta~titer)) +
plot_themes
p_composite <- plot_grid( p1, p2, ncol = 1)
p_composite
require(ggplot2)
require(cowplot)
require(MASS)
require(RSQLite)
require(reshape2)
require(dplyr)
source("../Utility_scripts/model_simulation_functions_boosting.R")
textSize = 12
source("../Utility_scripts/plot_themes.R")
require(pomp)
require(panelPomp)
select <- dplyr::select
summarize <- dplyr::summarize
age_thres = 15 # Age threshold to distinguish between children and adults
test_subtype = "pH1N1" # Choose between "pH1N1" and "H3N2"
data_table_name <- paste0("data_sub_model_",test_subtype)
pomp_filename <- "" # Name the pomp object file (".rda" file)
dbFilename <- "../../../Data/Data.sqlite"
#Read in data
db <- dbConnect(SQLite(), dbFilename)
serology_sub <- dbReadTable(db, data_table_name) %>%
rename(age = age_at_recruitment)
dbDisconnect(db)
# Calculate the time between first titer and swab, and between swab and second titer
sub <- serology_sub%>%
mutate(Child  = as.factor(age <= age_thres)) %>%
group_by(memberID,swab_date,Child,age,min_date,max_date) %>%
summarize(delta = log_titer_trans(max(value)) - log_titer_trans(min(value)),
pre = log_titer_trans(min(value)),
dt1 = as.numeric(max(swab_date) - min(date)),
dt2 = as.numeric(max(date) - max(swab_date)),
dt_total = as.numeric(max(date) - min(date)))
p1 <- ggplot(sub %>% filter(dt_total < 365), aes(x = pre, y = delta)) +
geom_point() +
stat_smooth(method = "lm", color = "red", se = F) +
geom_jitter(height = .1, width = .1) +
xlab("Log pre-infection titer") +
ylab(expression(Delta~titer)) +
plot_themes
p2 <- ggplot(sub %>% filter(dt_total < 365), aes(x = pre, y = delta)) +
geom_point() +
facet_wrap(~Child) +
stat_smooth(method = "lm", color = "red", se = F) +
geom_jitter(height = .1, width = .1) +
xlab("Log pre-infection titer") +
ylab(expression(Delta~titer)) +
plot_themes
p_composite <- plot_grid( p1, p2, ncol = 1)
save_plot("delta_vs_pre.pdf", p_composite, base_width = 6, base_height = 4)
source('~/Desktop/Flu_immune_dynamics/Influenza-immune-dynamics/Models/Short_term_sub_model/Raw_data_analysis/analyze_boost_data.R', echo=TRUE)
setwd("~/Desktop/Flu_immune_dynamics/Influenza-immune-dynamics/Models/Single_strain_model/Inference")
log(.3)
log(.6)
log(1.9)
log(.9)
require(ggplot2)
require(MASS)
require(RSQLite)
require(reshape2)
require(dplyr)
source("../Utility_scripts/model_functions.R")
source("../../../Imprinting/imprinting_functions.R")
require(panelPomp)
select <- dplyr::select
rename <- dplyr::rename
summarize <- dplyr::summarise
contains <- dplyr::contains
## Set up input and output files  ## ----------------------------------------------------------------------------------------------------------------------------------
dbFilename <- "../../../Data/Data.sqlite"
test_subtype = "pH1N1"
host_data_filename = paste0("pomp_data_",test_subtype, ".rda")
calculate_imprinting = T
require(ggplot2)
require(MASS)
require(RSQLite)
require(reshape2)
require(dplyr)
source("../Utility_scripts/model_functions.R")
source("../../../Imprinting/imprinting_functions.R")
require(panelPomp)
select <- dplyr::select
rename <- dplyr::rename
summarize <- dplyr::summarise
contains <- dplyr::contains
## Set up input and output files  ## ----------------------------------------------------------------------------------------------------------------------------------
dbFilename <- "../../../Data/Data.sqlite"
test_subtype = "pH1N1" # Choose between pH1N1 and H3N2
host_data_filename = paste0("pomp_data_",test_subtype, ".rda")
calculate_imprinting = T
#Read in data
db <- dbConnect(SQLite(), dbFilename)
serology <- dbReadTable(db, "serology_full_model") %>%
filter(subtype == test_subtype) %>%
mutate(date = as.Date(date, origin = "1970-1-1"))
demography <- dbReadTable(db, "demography_full_model") %>%
mutate(birthdate = as.Date(birthdate, origin = "1970-1-1"),
visitdate = as.Date(visitdate, origin = "1970-1-1"))
dbDisconnect(db)
## Imprinting data ##
serology <- serology %>% filter(memberID %in% unique(serology$memberID)[1:10])
if(calculate_imprinting){
duration_maternal_Abs = 6 # Months
max_age_first_exposure = 12
MONTHS_PER_YEAR = 12
smooth_frequency_data = F
pandemic_data <- read.csv("../../../Imprinting/frequency_data/Historic_Flu_Pandemics.csv") %>% rename(year = FirstYearOfSeason,
frac_h3n2 = H3N2_fraction,
frac_h1n1 = H1N1_fraction,
frac_h2n2 = H2N2_fraction) %>%    select(-Source) %>%
filter(year < 1968) %>%
arrange(year) %>%
select(year,frac_h1n1,frac_h3n2, frac_h2n2)
pandemic_fractions <- pandemic_data
GISAID_data = read.csv("../../../Imprinting/frequency_data/GISAID_fractions.csv") %>%
select(-X) %>%
filter(year < 1997)
flunet_data = read.csv("../../../Imprinting/frequency_data/FluNetInteractiveReport.csv") %>% mutate(frac_h1n1 = (AH1/INF_A))
flunet_yearly <- flunet_data %>% group_by(Year) %>% summarize(h1 = sum(AH1, AH1N12009, na.rm=T), h3 = sum(AH3,na.rm=T), all_A = sum(INF_A,na.rm=T)) %>%
mutate(frac_h1n1 = h1/all_A, frac_h3n2 = h3/all_A, frac_h2n2 = 0) %>%
rename(year = Year) %>%
select(year, frac_h1n1, frac_h3n2,frac_h2n2) %>%
filter(year %in% c(1997:2012))
relative_incidence <- rbind(pandemic_fractions, GISAID_data,flunet_yearly)
imprinting_data <- lapply(unique(serology$memberID), prob_primary_exposure, demog_data = demography, sero_data = serology)
df_imprinting <- as.data.frame(do.call("rbind",imprinting_data)) %>% mutate(memberID = unique(serology$memberID))
save(df_imprinting, file = imprinting_data_filename)
}
strains = subtype
strains = test_subtype
host_data_list <- lapply(unique(serology$memberID),
FUN = make_pomp_data_for_ind,
demographic_data = demog,
strain_vec = strains,
imprinting_data = df_imprinting,
simulate_times = F, # Do not simulate additional visits for individuals
n_vis_sim = NA) # Number of observations per individual IF simulating data
source("../Utility_scripts/data_formatting_functions.R")
host_data_list <- lapply(unique(serology$memberID),
FUN = make_pomp_data_for_ind,
demographic_data = demog,
strain_vec = strains,
imprinting_data = df_imprinting,
simulate_times = F, # Do not simulate additional visits for individuals
n_vis_sim = NA) # Number of observations per individual IF simulating data
require(ggplot2)
require(MASS)
require(RSQLite)
require(reshape2)
require(dplyr)
source("../Utility_scripts/model_functions.R")
source("../Utility_scripts/data_formatting_functions.R")
source("../../../Imprinting/imprinting_functions.R")
require(panelPomp)
select <- dplyr::select
rename <- dplyr::rename
summarize <- dplyr::summarise
contains <- dplyr::contains
## Set up input and output files  ## ----------------------------------------------------------------------------------------------------------------------------------
dbFilename <- "../../../Data/Data.sqlite"
test_subtype = "pH1N1" # Choose between pH1N1 and H3N2
host_data_filename = paste0("pomp_data_",test_subtype, ".rda")
calculate_imprinting = T
imprinting_data_filename = "imprinting_data.rda"
#Read in data
db <- dbConnect(SQLite(), dbFilename)
serology <- dbReadTable(db, "serology_full_model") %>%
filter(subtype == test_subtype) %>%
mutate(date = as.Date(date, origin = "1970-1-1"))
demography <- dbReadTable(db, "demography_full_model") %>%
mutate(birthdate = as.Date(birthdate, origin = "1970-1-1"),
visitdate = as.Date(visitdate, origin = "1970-1-1"))
dbDisconnect(db)
serology <- serology %>% filter(memberID %in% unique(serology$memberID)[1:10])
## Imprinting data ## --------------------------------------------------------------------------------------------------
if(calculate_imprinting){
duration_maternal_Abs = 6 # Months
max_age_first_exposure = 12
MONTHS_PER_YEAR = 12
smooth_frequency_data = F
pandemic_data <- read.csv("../../../Imprinting/frequency_data/Historic_Flu_Pandemics.csv") %>% rename(year = FirstYearOfSeason,
frac_h3n2 = H3N2_fraction,
frac_h1n1 = H1N1_fraction,
frac_h2n2 = H2N2_fraction) %>%    select(-Source) %>%
filter(year < 1968) %>%
arrange(year) %>%
select(year,frac_h1n1,frac_h3n2, frac_h2n2)
pandemic_fractions <- pandemic_data
GISAID_data = read.csv("../../../Imprinting/frequency_data/GISAID_fractions.csv") %>%
select(-X) %>%
filter(year < 1997)
flunet_data = read.csv("../../../Imprinting/frequency_data/FluNetInteractiveReport.csv") %>% mutate(frac_h1n1 = (AH1/INF_A))
flunet_yearly <- flunet_data %>% group_by(Year) %>% summarize(h1 = sum(AH1, AH1N12009, na.rm=T), h3 = sum(AH3,na.rm=T), all_A = sum(INF_A,na.rm=T)) %>%
mutate(frac_h1n1 = h1/all_A, frac_h3n2 = h3/all_A, frac_h2n2 = 0) %>%
rename(year = Year) %>%
select(year, frac_h1n1, frac_h3n2,frac_h2n2) %>%
filter(year %in% c(1997:2012))
relative_incidence <- rbind(pandemic_fractions, GISAID_data,flunet_yearly)
imprinting_data <- lapply(unique(serology$memberID), prob_primary_exposure, demog_data = demography, sero_data = serology)
df_imprinting <- as.data.frame(do.call("rbind",imprinting_data)) %>% mutate(memberID = unique(serology$memberID))
save(df_imprinting, file = imprinting_data_filename)
}
if(!calculate_imprinting){
load(imprinting_data_filename)
}
## Make list of host data -----------------------------------------------------------------------------------------------------
strains = test_subtype
host_data_list <- lapply(unique(serology$memberID),
FUN = make_pomp_data_for_ind,
demographic_data = demography,
strain_vec = strains,
imprinting_data = df_imprinting,
simulate_times = F, # Do not simulate additional visits for individuals
n_vis_sim = NA) # Number of observations per individual IF simulating data
host_data_list[[1]]
