save_plots <- T # Save plots to pdf?
# Get the community intensity data
intensity_data_tablename <- paste0("community_intensity_", this_subtype)
dbFilename <- "../../../../Data/Data.sqlite"
db <- dbConnect(SQLite(), dbFilename)
intensity_data <- dbReadTable(db, intensity_data_tablename) %>%
mutate(full_date = as.Date(full_date, origin = "1970-1-1"))
dbDisconnect(db)
pomp_object_filename = "../../Inference/panel_object_pH1N1.rda"
## ----------------------------------------------------------------------------------
## Sylvia Ranjeva, August 2018
## Simulate latent state data from the best-fit parameter set.
## ----------------------------------------------------------------------------------
require(ggplot2)
theme_set(theme_bw(base_size = 18))
require(MASS)
require(RSQLite)
require(reshape2)
require(dplyr)
source("../../Utility_scripts/model_functions_hh.R")
require(pomp)
require(panelPomp)
select = dplyr::select
summarize = dplyr::summarize
rename = dplyr::rename
group_by = dplyr::group_by
# IF running on a high-performance computing cluster --------------------------------------------------------
args = commandArgs(trailingOnly=TRUE)
chainId = as.numeric(args[1])
## Input params/specs, filenames, etc. ## ---------------------------------------------------------------------------------------------------------------------
n_strains = 1
n_sim = 3
this_subtype = "pH1N1"
simulation_output_filename <- paste0("simulated_data_",n_sim, "_",this_subtype,".rda")
simulation_params_filename <- "" # Name of file (".rda" file) containing simulation parameters, which should be a named vector called "pars"
## --------------------------------------------------------------------------------------------------------------------------------------------------------------
load(simulation_params_filename)
load(pomp_object_filename)
titer_df_all <- data.frame()
inf_times_df_all <- data.frame()
for( j in c(1:n_sim)){
cat("j is : ", j, "\n")
for( i in c(1:length(panelObject))){
hh1 <- panelObject@unit.objects[[i]]
dat <- host_data_list[[i]]
hh_params <- hh1@params[!(names(hh1@params) %in% names(panelObject@pParams$shared))]
n_members = as.numeric(hh_params["n_members"])
members_hh = dat$demog_init$member
s1 <- simulate(hh1, params = c(pars,hh_params))
df_s1 <- as.data.frame(t(states(s1)))
for( k in c(1:n_members)){
df_ind <- df_s1 %>% select(contains(paste0("m",k)))
demog_ind <- dat$demog_init %>% filter(member == members_hh[k])
titer_df <- data.frame(hh = i,
member = k,
sim = j,
time = s1@times,
date = as.Date(as.Date(as.character(dat$dates[1]),origin = "1970-1-1") + as.numeric(hh1@times), origin = '1970-1-1'),
age = demog_ind$age,
h_latent = sapply(df_ind$h_m,log_titer_trans),
h_baseline = sapply(df_ind$h_baseline_individual,log_titer_trans),
q_latent = df_ind$q_m
)
titer_df_all <- rbind(titer_df_all, titer_df)
date_time_df <- data.frame(time = as.numeric(hh1@times),
date = as.Date(as.Date(as.character(dat$dates[1]),origin = "1970-1-1") + as.numeric(hh1@times), origin = '1970-1-1')
)
inf_times_sim = unique(df_ind$t_last_infection_m)
n_inf <- sum(inf_times_sim > -1)
if(n_inf > 0){
inf_times_df <- data.frame( hh = i,
member = k,
age = demog_ind$age,
inf_time = inf_times_sim[inf_times_sim > -1]
)
inf_times_df$date = as.Date(as.numeric(as.Date(date_time_df$date[1], origin = '1970-1-1')) + inf_times_df$inf_time, origin = '1970-1-1')
inf_times_df$sim = j
inf_times_df_all <- rbind(inf_times_df_all, inf_times_df)
}
}
}
}
titer_df_all <-  titer_df_all %>%  mutate(ind = group_indices_(., .dots=c("hh", "member")))
inf_times_df_all$ind = NA
for(i in c(1:nrow(inf_times_df_all))){
inf_times_df_all[i,]$ind = unique(titer_df_all[titer_df_all$hh == inf_times_df_all[i,]$hh & titer_df_all$member == inf_times_df_all[i,]$member,]$ind)
}
save(inf_times_df_all, titer_df_all, pars, file = simulation_output_filename)
pars = panelObject@pParams$shared
titer_df_all <- data.frame()
inf_times_df_all <- data.frame()
for( j in c(1:n_sim)){
cat("j is : ", j, "\n")
for( i in c(1:length(panelObject))){
hh1 <- panelObject@unit.objects[[i]]
dat <- host_data_list[[i]]
hh_params <- hh1@params[!(names(hh1@params) %in% names(panelObject@pParams$shared))]
n_members = as.numeric(hh_params["n_members"])
members_hh = dat$demog_init$member
s1 <- simulate(hh1, params = c(pars,hh_params))
df_s1 <- as.data.frame(t(states(s1)))
for( k in c(1:n_members)){
df_ind <- df_s1 %>% select(contains(paste0("m",k)))
demog_ind <- dat$demog_init %>% filter(member == members_hh[k])
titer_df <- data.frame(hh = i,
member = k,
sim = j,
time = s1@times,
date = as.Date(as.Date(as.character(dat$dates[1]),origin = "1970-1-1") + as.numeric(hh1@times), origin = '1970-1-1'),
age = demog_ind$age,
h_latent = sapply(df_ind$h_m,log_titer_trans),
h_baseline = sapply(df_ind$h_baseline_individual,log_titer_trans),
q_latent = df_ind$q_m
)
titer_df_all <- rbind(titer_df_all, titer_df)
date_time_df <- data.frame(time = as.numeric(hh1@times),
date = as.Date(as.Date(as.character(dat$dates[1]),origin = "1970-1-1") + as.numeric(hh1@times), origin = '1970-1-1')
)
inf_times_sim = unique(df_ind$t_last_infection_m)
n_inf <- sum(inf_times_sim > -1)
if(n_inf > 0){
inf_times_df <- data.frame( hh = i,
member = k,
age = demog_ind$age,
inf_time = inf_times_sim[inf_times_sim > -1]
)
inf_times_df$date = as.Date(as.numeric(as.Date(date_time_df$date[1], origin = '1970-1-1')) + inf_times_df$inf_time, origin = '1970-1-1')
inf_times_df$sim = j
inf_times_df_all <- rbind(inf_times_df_all, inf_times_df)
}
}
}
}
titer_df_all <-  titer_df_all %>%  mutate(ind = group_indices_(., .dots=c("hh", "member")))
inf_times_df_all$ind = NA
for(i in c(1:nrow(inf_times_df_all))){
inf_times_df_all[i,]$ind = unique(titer_df_all[titer_df_all$hh == inf_times_df_all[i,]$hh & titer_df_all$member == inf_times_df_all[i,]$member,]$ind)
}
save(inf_times_df_all, titer_df_all, pars, file = simulation_output_filename)
titer_df_all$age = titer_df_all$age + titer_df_all$time/365
inf_times_df_all$child = as.numeric(inf_times_df_all$age < 15)
inf_times_df_all$adult = as.numeric(inf_times_df_all$age > 20)
titer_df_all$child = as.numeric(titer_df_all$age < 15)
titer_df_all$adult = as.numeric(titer_df_all$age > 20)
for( i in c(1:length(host_data_list))){
n_vis <- nrow(host_data_list[[i]]$y)
if(length(unique(host_data_list[[i]]$dates))< 2){
host_data_list[[i]] <- NA
}
}
ind <- which(is.na(host_data_list))
if(length(ind) > 0 ){
host_data_list <- host_data_list[-which(is.na(host_data_list))]
}
age_vec <- array(NA, length(host_data_list))
df_demog = data.frame()
for( i in c(1:length(host_data_list))){
age_vec[i] <- as.numeric( host_data_list[[i]]$demog_init["age"])
df_demog <- rbind(df_demog, data.frame(ind = i,
first_date = host_data_list[[i]]$dates[1],
last_date = host_data_list[[i]]$dates[length(host_data_list[[i]]$dates)],
age = host_data_list[[i]]$demog_init["age"])
)
}
df_demog_kids <- df_demog %>% filter(age <= age_threshold)
df_demog_ad <- df_demog %>% filter(age > age_threshold)
n_kids = sum(age_vec <= age_threshold)
n_ad = sum(age_vec > age_threshold)
n_sim = max(titer_df_all$sim)
age_vec <- array(NA, length(host_data_list))
df_demog = data.frame()
for( i in c(1:length(host_data_list))){
df_demog <- rbind(df_demog, data.frame(hh= i,
member = c(1:length(host_data_list[[i]]$demog_init$member)),
first_date = host_data_list[[i]]$dates[1],
last_date = host_data_list[[i]]$dates[length(host_data_list[[i]]$dates)],
age = host_data_list[[i]]$demog_init$age)
)
}
df_demog_kids <- df_demog %>% filter(age <= age_threshold)
df_demog_ad <- df_demog %>% filter(age > age_threshold)
n_kids = sum(age_vec <= age_threshold)
n_ad = sum(age_vec > age_threshold)
n_sim = max(titer_df_all$sim)
fold_rises_children_plot_filename <- paste0("./Output_plots/fold_rises_children_",this_subtype,".pdf")
fold_rises_adults_plot_filename <- paste0("./Output_plots/fold_rises_adults_",this_subtype,".pdf")
source("./Plotting_scripts/fold_rises.R")
head(titer_df_all)
titer_df_all <- data.frame()
inf_times_df_all <- data.frame()
for( j in c(1:n_sim)){
cat("j is : ", j, "\n")
for( i in c(1:length(panelObject))){
hh1 <- panelObject@unit.objects[[i]]
dat <- host_data_list[[i]]
hh_params <- hh1@params[!(names(hh1@params) %in% names(panelObject@pParams$shared))]
n_members = as.numeric(hh_params["n_members"])
members_hh = dat$demog_init$member
s1 <- simulate(hh1, params = c(pars,hh_params))
df_s1 <- as.data.frame(t(states(s1)))
df_obs_hh1 <- as.data.frame(t(obs(s1)))
for( k in c(1:n_members)){
df_ind <- df_s1 %>% select(contains(paste0("m",k)))
df_obs_ind <- dat$y %>% select(contains(paste0("m",k)))
demog_ind <- dat$demog_init %>% filter(member == members_hh[k])
titer_df <- data.frame(hh = i,
member = k,
sim = j,
time = s1@times,
date = as.Date(as.Date(as.character(dat$dates[1]),origin = "1970-1-1") + as.numeric(hh1@times), origin = '1970-1-1'),
age = demog_ind$age,
h_latent = sapply(df_ind$h_m,log_titer_trans),
#h_obs_sim = as.numeric(obs(s1)["h_obs_s1",]),
h_obs = sapply(as.numeric(unlist(df_obs_ind)),log_titer_trans),
h_baseline = sapply(df_ind$h_baseline_individual,log_titer_trans),
q_latent = df_ind$q_m
)
titer_df_all <- rbind(titer_df_all, titer_df)
date_time_df <- data.frame(time = as.numeric(hh1@times),
date = as.Date(as.Date(as.character(dat$dates[1]),origin = "1970-1-1") + as.numeric(hh1@times), origin = '1970-1-1')
)
inf_times_sim = unique(df_ind$t_last_infection_m)
n_inf <- sum(inf_times_sim > -1)
if(n_inf > 0){
inf_times_df <- data.frame( hh = i,
member = k,
age = demog_ind$age,
inf_time = inf_times_sim[inf_times_sim > -1]
)
inf_times_df$date = as.Date(as.numeric(as.Date(date_time_df$date[1], origin = '1970-1-1')) + inf_times_df$inf_time, origin = '1970-1-1')
inf_times_df$sim = j
inf_times_df_all <- rbind(inf_times_df_all, inf_times_df)
}
}
}
}
titer_df_all <-  titer_df_all %>%  mutate(ind = group_indices_(., .dots=c("hh", "member")))
inf_times_df_all$ind = NA
for(i in c(1:nrow(inf_times_df_all))){
inf_times_df_all[i,]$ind = unique(titer_df_all[titer_df_all$hh == inf_times_df_all[i,]$hh & titer_df_all$member == inf_times_df_all[i,]$member,]$ind)
}
save(inf_times_df_all, titer_df_all, pars, file = simulation_output_filename)
########################################################################
require(ggplot2)
require(MASS)
require(RSQLite)
require(reshape2)
require(lubridate)
require(dplyr)
source("../../Utility_scripts/model_functions_hh.R")
textSize = 12
source("../../Utility_scripts/plot_themes.R")
require(pomp)
require(panelPomp)
require(cowplot)
select <- dplyr::select
summarize <- dplyr::summarize
mutate <- dplyr::mutate
group_by <- dplyr::group_by
## Input specs ## ----------------------------------------------------------------------------------------------------------------------------
age_threshold = 15 # Age that divides kids and adults
this_subtype = "pH1N1" # Choose either "pH1N1" or "H3N2"
n_strains = 1
save_plots <- T # Save plots to pdf?
intensity_data_tablename <- paste0("community_intensity_", this_subtype)
dbFilename <- "../../../../Data/Data.sqlite"
db <- dbConnect(SQLite(), dbFilename)
intensity_data <- dbReadTable(db, intensity_data_tablename) %>%
mutate(full_date = as.Date(full_date, origin = "1970-1-1"))
dbDisconnect(db)
setwd("~/Desktop/GITHUB/Influenza-immune-dynamics/Models/Single_strain_model/Simulations/Latent_states")
setwd("~/Desktop/GITHUB/Influenza-immune-dynamics/Models/Single_strain_model/Simulations/Model_validation")
########################################################################
require(ggplot2)
require(MASS)
require(RSQLite)
require(reshape2)
require(lubridate)
require(dplyr)
source("../../Utility_scripts/model_functions_hh.R")
textSize = 12
source("../../Utility_scripts/plot_themes.R")
require(pomp)
require(panelPomp)
require(cowplot)
select <- dplyr::select
summarize <- dplyr::summarize
mutate <- dplyr::mutate
group_by <- dplyr::group_by
## Input specs ## ----------------------------------------------------------------------------------------------------------------------------
age_threshold = 15 # Age that divides kids and adults
this_subtype = "pH1N1" # Choose either "pH1N1" or "H3N2"
n_strains = 1
save_plots <- T # Save plots to pdf?
# Get the community intensity data
intensity_data_tablename <- paste0("community_intensity_", this_subtype)
dbFilename <- "../../../../Data/Data.sqlite"
db <- dbConnect(SQLite(), dbFilename)
intensity_data <- dbReadTable(db, intensity_data_tablename) %>%
mutate(full_date = as.Date(full_date, origin = "1970-1-1"))
dbDisconnect(db)
pomp_object_filename = "../../Inference/panel_object_pH1N1.rda"
model_predictions_filename <- "simulated_data_3_pH1N1.rda"
load(pomp_object_filename)
rm(panelObject)
load(model_predictions_filename)
titer_df_all$age = titer_df_all$age + titer_df_all$time/365
inf_times_df_all$child = as.numeric(inf_times_df_all$age < 15)
inf_times_df_all$adult = as.numeric(inf_times_df_all$age > 20)
titer_df_all$child = as.numeric(titer_df_all$age < 15)
titer_df_all$adult = as.numeric(titer_df_all$age > 20)
## Apply measurement error --------------------------------------------------------------------
titer_df_all$h_obs_sim = sapply(titer_df_all$h_latent, err_func, thres = 1, sig = 1.2, sig2 = 0.74)
for( i in c(1:length(host_data_list))){
n_vis <- nrow(host_data_list[[i]]$y)
if(length(unique(host_data_list[[i]]$dates))< 2){
host_data_list[[i]] <- NA
}
}
ind <- which(is.na(host_data_list))
if(length(ind) > 0 ){
host_data_list <- host_data_list[-which(is.na(host_data_list))]
}
age_vec <- array(NA, length(host_data_list))
df_demog = data.frame()
for( i in c(1:length(host_data_list))){
df_demog <- rbind(df_demog, data.frame(hh= i,
member = c(1:length(host_data_list[[i]]$demog_init$member)),
first_date = host_data_list[[i]]$dates[1],
last_date = host_data_list[[i]]$dates[length(host_data_list[[i]]$dates)],
age = host_data_list[[i]]$demog_init$age)
)
}
df_demog_kids <- df_demog %>% filter(age <= age_threshold)
df_demog_ad <- df_demog %>% filter(age > age_threshold)
n_kids = sum(age_vec <= age_threshold)
n_ad = sum(age_vec > age_threshold)
n_sim = max(titer_df_all$sim)
fold_rises_children_plot_filename <- paste0("./Output_plots/fold_rises_children_",this_subtype,".pdf")
fold_rises_adults_plot_filename <- paste0("./Output_plots/fold_rises_adults_",this_subtype,".pdf")
source("./Plotting_scripts/fold_rises.R")
save_plot(fold_rises_children_plot_filename, p_fold_rises_children , base_width = 6, base_height = 3)
save_plot(fold_rises_adults_plot_filename, p_fold_rises_adults , base_width = 6, base_height = 3)
save_plot(fold_rises_children_plot_filename, p_fold_rises_children , base_width = 6, base_height = 3)
save_plot(fold_rises_adults_plot_filename, p_fold_rises_adults , base_width = 6, base_height = 3)
head(titer_df_all)
p_cv_children <- make_cv_plot(titer_df_sub = titer_df_all %>% filter(child == 1))
make_cv_plot <- function(titer_df_sub){
cv_data <- titer_df_sub %>%
group_by(sim, ind) %>%
summarize(h_baseline_obs = as.numeric(h_obs[1] == 1),
h_baseline_sim = as.numeric(h_obs_sim[1] == 1),
cv_obs = sd(h_obs)/mean(h_obs),
cv_sim = sd(h_obs_sim)/mean(h_obs_sim))
cv_data_obs <- cv_data %>%
select(c(ind, contains("obs"))) %>%
mutate(data = "Observed") %>%
rename(mean = cv_obs,
baseline = h_baseline_obs)
cv_data_sim <- cv_data %>%
select(c(ind, contains("sim"))) %>%
mutate(data = "Simulated") %>%
rename(mean = cv_sim,
baseline = h_baseline_sim)
df = rbind(cv_data_obs, cv_data_sim)
df$baseline_f = factor(df$baseline, labels = c("Detectable initial titer", "Undetectable intiial titer"))
p_cv <- ggplot(df, aes(x= mean)) + stat_bin(aes(y=..density.., fill = data),alpha = .4, position='dodge')+
facet_wrap(~ baseline_f) +
xlab("CV") +
ylab("Density") +
plot_themes
return(p_cv)
}
p_cv_children <- make_cv_plot(titer_df_sub = titer_df_all %>% filter(child == 1))
p_cv_adults <- make_cv_plot(titer_df_sub = titer_df_all %>% filter(child == 0))
p_cv_adults
head(titer_df_all)
min(titer_df_all$age)
## Distribution of n-fold titer rises:
fold_rises_plot_filename <- paste0("./Output_plots/fold_rises_",this_subtype,".pdf")
source("./Plotting_scripts/fold_rises_8_2018.R")
save_plot(fold_rises_plot_filename, p_fold_rises_children , base_width = 6, base_height = 3)
source("./Plotting_scripts/fold_rises_8_2018.R")
if(save_plots == T){
save_plot(fold_risesplot_filename, p_fold_rises , base_width = 6, base_height = 3)
}
save_plot(fold_rises_plot_filename, p_fold_rises , base_width = 6, base_height = 3)
p_fold_rises
df
df_sim <- titer_df_all %>%
select(ind,sim,time,date,age,h_obs_sim) %>%
group_by(ind,sim,age) %>%
mutate(diff = c(NA,diff(h_obs_sim)),
max = max(h_obs_sim)) %>%
filter(!is.na(diff)) %>%
mutate(twofold = as.numeric(diff > 0),
fourfold = as.numeric(diff > 1),
eightfold = as.numeric(diff > 2)) %>%
group_by(ind,sim,age,max) %>%
summarize(n_2 = sum(twofold),
n_4 = sum(fourfold),
n_8 = sum(eightfold)) %>%
group_by(sim,n_2) %>%
summarize(n =length(ind)) %>%
group_by(n_2) %>%
summarize(mean = mean(n),
min = min(n),
max = max(n),
data = "sim") %>%
rename(n = n_2)
df2
df_sim
head(titer_df_all)
df_obs <- titer_df_all %>%
select(ind,sim,time,date,age,h_obs) %>%
group_by(ind,sim,age) %>%
mutate(diff = c(NA,diff(h_obs))) %>%
filter(!is.na(diff)) %>%
mutate(twofold = as.numeric(diff > 0),
fourfold = as.numeric(diff > 1),
eightfold = as.numeric(diff > 2)) %>%
group_by(ind,sim,age) %>%
summarize(n_2 = sum(twofold),
n_4 = sum(fourfold),
n_8 = sum(eightfold)) %>%
group_by(sim,n_2) %>%
summarize(n =length(ind)) %>%
group_by(n_2) %>%
summarize(mean = mean(n),
min = min(n),
max = max(n),
data = "obs") %>%
rename(n=n_2)
df_obs
head(titer_df_all)
hist(titer_df_all$h_obs)
hist(titer_df_all$h_latent)
hist(titer_df_all$h_obs_sim)
df_sim <- titer_df_all %>%
select(ind,sim,time,date,age,h_obs_sim) %>%
group_by(ind,sim,age) %>%
mutate(diff = c(NA,diff(h_obs_sim))) %>%
filter(!is.na(diff)) %>%
mutate(twofold = as.numeric(diff > 0),
fourfold = as.numeric(diff > 1),
eightfold = as.numeric(diff > 2)) %>%
group_by(ind,sim,age) %>%
summarize(n_2 = sum(twofold),
n_4 = sum(fourfold),
n_8 = sum(eightfold)) %>%
group_by(sim,n_4) %>%
summarize(n =length(ind)) %>%
group_by(n_4) %>%
summarize(mean = mean(n),
min = min(n),
max = max(n),
data = "sim") %>%
rename(n = n_4)
df_sim
df_sim <- titer_df_all %>%
select(ind,sim,time,date,age,h_obs_sim)
head(df_sim)
# 2 - fold
df_sim <- titer_df_all %>%
select(ind,sim,time,date,age,h_obs_sim) %>%
group_by(ind,sim,age) %>%
mutate(diff = c(NA,diff(h_obs_sim)),
max = max(h_obs_sim)) %>%
filter(!is.na(diff))
head(df_sim)
df_sim <- titer_df_all %>%
select(ind,sim,time,date,age,h_obs_sim) %>%
group_by(ind,sim,age) %>%
mutate(diff = c(NA,diff(h_obs_sim)),
max = max(h_obs_sim))
head(df_sim)
load(pomp_object_filename)
rm(panelObject)
load(model_predictions_filename)
## Apply measurement error --------------------------------------------------------------------
titer_df_all$h_obs_sim = sapply(titer_df_all$h_latent, err_func, thres = 1, sig = 1.2, sig2 = 0.74)
## Format data ##----------------------------------------------------------------------------------------------------------------------------
for( i in c(1:length(host_data_list))){
n_vis <- nrow(host_data_list[[i]]$y)
if(length(unique(host_data_list[[i]]$dates))< 2){
host_data_list[[i]] <- NA
}
}
ind <- which(is.na(host_data_list))
if(length(ind) > 0 ){
host_data_list <- host_data_list[-which(is.na(host_data_list))]
}
age_vec <- array(NA, length(host_data_list))
df_demog = data.frame()
for( i in c(1:length(host_data_list))){
df_demog <- rbind(df_demog, data.frame(hh= i,
member = c(1:length(host_data_list[[i]]$demog_init$member)),
first_date = host_data_list[[i]]$dates[1],
last_date = host_data_list[[i]]$dates[length(host_data_list[[i]]$dates)],
age = host_data_list[[i]]$demog_init$age)
)
}
df_demog_kids <- df_demog %>% filter(age <= age_threshold)
df_demog_ad <- df_demog %>% filter(age > age_threshold)
n_kids = sum(age_vec <= age_threshold)
n_ad = sum(age_vec > age_threshold)
n_sim = max(titer_df_all$sim)
## Make plots -------------------------------------------------------------------------------------------------------------------------
## Distribution of n-fold titer rises:
fold_rises_plot_filename <- paste0("./Output_plots/fold_rises_",this_subtype,".pdf")
source("./Plotting_scripts/fold_rises_8_2018.R")
save_plot(fold_rises_plot_filename, p_fold_rises , base_width = 6, base_height = 3)
